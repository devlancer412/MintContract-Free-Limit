/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staker, StakerInterface } from "../../contracts/Staker";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getReward",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRewardToken",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakeToken",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "time",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardAmount",
            type: "uint256",
          },
        ],
        internalType: "struct Staker.StakeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
    ],
    name: "setRewardToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
    ],
    name: "setStakingToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a33610024565b6064600355610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610de8806100836000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806369940d791161008c5780638aee8127116100665780638aee8127146101815780638da5cb5b14610194578063a694fc3a146101af578063f2fde38b146101c257600080fd5b806369940d7914610147578063715018a61461014f57806376e35d891461015757600080fd5b80631e9b12ef146100d457806334fcf437146100e95780633ccfd60b146100fc5780633d18b91214610104578063500a15641461011f5780635d3eea9114610134575b600080fd5b6100e76100e2366004610af0565b6101d5565b005b6100e76100f7366004610b20565b61022a565b6100e7610259565b61010c610432565b6040519081526020015b60405180910390f35b6101276104ab565b6040516101169190610b69565b6100e7610142366004610b20565b610531565b6101276106da565b6100e761071f565b61015f610755565b6040805182518152602080840151908201529181015190820152606001610116565b6100e761018f366004610af0565b6107b3565b6000546040516001600160a01b039091168152602001610116565b6100e76101bd366004610b20565b6107ff565b6100e76101d0366004610af0565b610a0c565b6000546001600160a01b031633146102085760405162461bcd60e51b81526004016101ff90610b9c565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102545760405162461bcd60e51b81526004016101ff90610b9c565b600355565b6001546001600160a01b03166102815760405162461bcd60e51b81526004016101ff90610bd1565b6002546001600160a01b03166102a95760405162461bcd60e51b81526004016101ff90610c12565b3360009081526004602052604090205462093a80908190612710906102ce9042610c5d565b600354336000908152600460205260409020600101546102ee9190610c74565b6102f89190610c74565b6103029190610c93565b61030c9190610c93565b336000908152600460205260408120600201805490919061032e908490610cb5565b90915550503360009081526004602052604090204281556002015461038e5760405162461bcd60e51b81526020600482015260166024820152755354414b494e473a616d6f756e74206973207a65726f60501b60448201526064016101ff565b3360008181526004602081905260408083206002908101805494905554905163a9059cbb60e01b8152918201939093526024810182905290916001600160a01b03169063a9059cbb906044015b602060405180830381600087803b1580156103f557600080fd5b505af1158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042d9190610ccd565b505050565b3360009081526004602052604090206001810154905462093a809081906127109061045d9042610c5d565b6003543360009081526004602052604090206001015461047d9190610c74565b6104879190610c74565b6104919190610c93565b61049b9190610c93565b6104a59083610cb5565b91505090565b600154604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b1580156104f057600080fd5b505afa158015610504573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052c9190810190610d05565b905090565b6001546001600160a01b03166105595760405162461bcd60e51b81526004016101ff90610bd1565b6002546001600160a01b03166105815760405162461bcd60e51b81526004016101ff90610c12565b336000908152600460205260409020600101548111156105ef5760405162461bcd60e51b8152602060048201526024808201527f5354414b494e473a616d6f756e7420697320736d616c6c207468616e207265716044820152631d595cdd60e21b60648201526084016101ff565b3360009081526004602052604090205462093a80908190612710906106149042610c5d565b600354336000908152600460205260409020600101546106349190610c74565b61063e9190610c74565b6106489190610c93565b6106529190610c93565b3360009081526004602052604081206002018054909190610674908490610cb5565b9091555050336000908152600460205260408120428155600101805484929061069e908490610c5d565b909155505060015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016103db565b600254604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b1580156104f057600080fd5b6000546001600160a01b031633146107495760405162461bcd60e51b81526004016101ff90610b9c565b6107536000610aa0565b565b61077960405180606001604052806000815260200160008152602001600081525090565b5033600090815260046020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6000546001600160a01b031633146107dd5760405162461bcd60e51b81526004016101ff90610b9c565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03166108275760405162461bcd60e51b81526004016101ff90610bd1565b6002546001600160a01b031661084f5760405162461bcd60e51b81526004016101ff90610c12565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d99190610ccd565b503360009081526004602052604090206001015462093a809015158061091057503360009081526004602052604090206002015415155b156109cb57336000908152600460205260409020548190612710906109359042610c5d565b600354336000908152600460205260409020600101546109559190610c74565b61095f9190610c74565b6109699190610c93565b6109739190610c93565b3360009081526004602052604081206002018054909190610995908490610cb5565b909155505033600090815260046020526040812042815560010180548492906109bf908490610cb5565b90915550610a09915050565b506040805160608101825282815242602080830191825260008385018181523382526004909252939093209151825551600182015590516002909101555b50565b6000546001600160a01b03163314610a365760405162461bcd60e51b81526004016101ff90610b9c565b6001600160a01b038116610a9b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101ff565b610a09815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610b0257600080fd5b81356001600160a01b0381168114610b1957600080fd5b9392505050565b600060208284031215610b3257600080fd5b5035919050565b60005b83811015610b54578181015183820152602001610b3c565b83811115610b63576000848401525b50505050565b6020815260008251806020840152610b88816040850160208701610b39565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5354414b494e473a646f65736e277420736574207374616b696e6720746f6b656040820152603760f91b606082015260800190565b6020808252818101527f5354414b494e473a646f65736e2774207365742072657761726420746f6b656e604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015610c6f57610c6f610c47565b500390565b6000816000190483118215151615610c8e57610c8e610c47565b500290565b600082610cb057634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610cc857610cc8610c47565b500190565b600060208284031215610cdf57600080fd5b81518015158114610b1957600080fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215610d1757600080fd5b815167ffffffffffffffff80821115610d2f57600080fd5b818401915084601f830112610d4357600080fd5b815181811115610d5557610d55610cef565b604051601f8201601f19908116603f01168101908382118183101715610d7d57610d7d610cef565b81604052828152876020848701011115610d9657600080fd5b610da7836020830160208801610b39565b97965050505050505056fea2646970667358221220f348e24d35f89efb528f07aa577767cdf3831c29f9f9d5b6e6f869a0f07689aa64736f6c63430008090033";

type StakerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staker__factory extends ContractFactory {
  constructor(...args: StakerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staker> {
    return super.deploy(overrides || {}) as Promise<Staker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Staker {
    return super.attach(address) as Staker;
  }
  override connect(signer: Signer): Staker__factory {
    return super.connect(signer) as Staker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakerInterface {
    return new utils.Interface(_abi) as StakerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Staker {
    return new Contract(address, _abi, signerOrProvider) as Staker;
  }
}
